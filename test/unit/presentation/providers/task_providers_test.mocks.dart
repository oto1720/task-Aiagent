// Mocks generated by Mockito 5.4.6 from annotations
// in task_aiagent/test/unit/presentation/providers/task_providers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_aiagent/core/utils/result.dart' as _i2;
import 'package:task_aiagent/domain/entities/task.dart' as _i5;
import 'package:task_aiagent/domain/repositories/task_repository.dart' as _i3;
import 'package:task_aiagent/domain/usecases/task/create_task_usecase.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<List<_i5.Task>>> getAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTasks, []),
            returnValue: _i4.Future<_i2.Result<List<_i5.Task>>>.value(
              _FakeResult_0<List<_i5.Task>>(
                this,
                Invocation.method(#getAllTasks, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<List<_i5.Task>>>);

  @override
  _i4.Future<_i2.Result<List<_i5.Task>>> getActiveTasksSortedByPriority() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveTasksSortedByPriority, []),
            returnValue: _i4.Future<_i2.Result<List<_i5.Task>>>.value(
              _FakeResult_0<List<_i5.Task>>(
                this,
                Invocation.method(#getActiveTasksSortedByPriority, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<List<_i5.Task>>>);

  @override
  _i4.Future<_i2.Result<List<_i5.Task>>> getTasksForDate(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksForDate, [date]),
            returnValue: _i4.Future<_i2.Result<List<_i5.Task>>>.value(
              _FakeResult_0<List<_i5.Task>>(
                this,
                Invocation.method(#getTasksForDate, [date]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<List<_i5.Task>>>);

  @override
  _i4.Future<_i2.Result<_i5.Task>> createTask(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#createTask, [task]),
            returnValue: _i4.Future<_i2.Result<_i5.Task>>.value(
              _FakeResult_0<_i5.Task>(
                this,
                Invocation.method(#createTask, [task]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.Task>>);

  @override
  _i4.Future<_i2.Result<_i5.Task>> updateTask(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i4.Future<_i2.Result<_i5.Task>>.value(
              _FakeResult_0<_i5.Task>(
                this,
                Invocation.method(#updateTask, [task]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.Task>>);

  @override
  _i4.Future<_i2.Result<void>> deleteTask(String? taskId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [taskId]),
            returnValue: _i4.Future<_i2.Result<void>>.value(
              _FakeResult_0<void>(
                this,
                Invocation.method(#deleteTask, [taskId]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<List<_i5.Task>>> reorderTasks(List<_i5.Task>? tasks) =>
      (super.noSuchMethod(
            Invocation.method(#reorderTasks, [tasks]),
            returnValue: _i4.Future<_i2.Result<List<_i5.Task>>>.value(
              _FakeResult_0<List<_i5.Task>>(
                this,
                Invocation.method(#reorderTasks, [tasks]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<List<_i5.Task>>>);

  @override
  _i4.Future<_i2.Result<_i5.Task>> toggleTaskCompletion(String? taskId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTaskCompletion, [taskId]),
            returnValue: _i4.Future<_i2.Result<_i5.Task>>.value(
              _FakeResult_0<_i5.Task>(
                this,
                Invocation.method(#toggleTaskCompletion, [taskId]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.Task>>);

  @override
  _i4.Future<_i2.Result<List<_i5.Task>>> bulkUpdateTasks(
    List<_i5.Task>? tasks,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#bulkUpdateTasks, [tasks]),
            returnValue: _i4.Future<_i2.Result<List<_i5.Task>>>.value(
              _FakeResult_0<List<_i5.Task>>(
                this,
                Invocation.method(#bulkUpdateTasks, [tasks]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<List<_i5.Task>>>);
}

/// A class which mocks [CreateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTaskUseCase extends _i1.Mock implements _i6.CreateTaskUseCase {
  MockCreateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i5.Task>> execute({
    required String? title,
    required String? description,
    required int? estimatedMinutes,
    required _i5.TaskPriority? priority,
    DateTime? dueDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {
              #title: title,
              #description: description,
              #estimatedMinutes: estimatedMinutes,
              #priority: priority,
              #dueDate: dueDate,
            }),
            returnValue: _i4.Future<_i2.Result<_i5.Task>>.value(
              _FakeResult_0<_i5.Task>(
                this,
                Invocation.method(#execute, [], {
                  #title: title,
                  #description: description,
                  #estimatedMinutes: estimatedMinutes,
                  #priority: priority,
                  #dueDate: dueDate,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.Task>>);
}
